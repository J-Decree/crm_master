# -*- coding: utf-8 -*-
# Generated by Django 1.11.12 on 2018-09-09 06:57
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('username', models.CharField(max_length=64, verbose_name='姓名')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'permissions': (('repository.index', 'repository.index'), ('repository.app_index', 'repository.app_index'), ('repository.cls_index', 'repository.cls_index'), ('repository.add_model_obj', 'repository.add_model_obj'), ('repository.add_model_obj:POST', 'repository.add_model_obj:POST'), ('repository.action_model_obj:POST', 'repository.action_model_obj:POST'), ('repository.delete_model_obj:POST', 'repository.delete_model_obj:POST'), ('repository.delete_collection:POST', 'repository.delete_collection:POST')),
            },
        ),
        migrations.CreateModel(
            name='AnswerInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(verbose_name='回答时间')),
                ('up_count', models.PositiveIntegerField(default=0, verbose_name='点赞数')),
                ('down_count', models.PositiveIntegerField(default=0, verbose_name='踩数')),
                ('handler', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='回答者')),
            ],
            options={
                'verbose_name_plural': '回答表',
                'db_table': 'AnswerInfo',
            },
        ),
        migrations.CreateModel(
            name='ClsInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=40, null=True, verbose_name='班级名')),
                ('semester', models.SmallIntegerField(verbose_name='学期')),
                ('start_date', models.DateField(verbose_name='开班日期')),
                ('graduate_date', models.DateField(verbose_name='毕业日期')),
                ('type', models.SmallIntegerField(choices=[(0, '脱产'), (1, '周末'), (2, '网络班')], verbose_name='班级类型')),
            ],
            options={
                'verbose_name_plural': '班级表',
                'db_table': 'ClsInfo',
            },
        ),
        migrations.CreateModel(
            name='ContractTemplateInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='标题')),
                ('content', models.TextField(verbose_name='内容')),
                ('create_date', models.DateField(auto_now_add=True, verbose_name='创建日期')),
            ],
            options={
                'verbose_name_plural': '合同模版',
                'db_table': 'ContractTemplate',
            },
        ),
        migrations.CreateModel(
            name='CourseInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20, verbose_name='课程名')),
                ('price', models.PositiveIntegerField(verbose_name='价格')),
                ('outline', models.TextField(verbose_name='课程大纲')),
                ('cyc', models.PositiveIntegerField(verbose_name='课程周期(月)')),
            ],
            options={
                'verbose_name_plural': '课程条目信息表',
                'db_table': 'CourseInfo',
            },
        ),
        migrations.CreateModel(
            name='CustomerDetailInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=8, verbose_name='真实姓名')),
                ('identity_id', models.CharField(max_length=18, unique=True, verbose_name='身份号码')),
                ('id_img_path', models.ImageField(null=True, unique=True, upload_to='', verbose_name='身份证照片路径')),
                ('passport_img_path', models.ImageField(null=True, unique=True, upload_to='', verbose_name='户口本照片路径')),
                ('birthday', models.DateField(verbose_name='出生日期')),
                ('sex', models.SmallIntegerField(choices=[(0, '男'), (1, '女')], default=0, verbose_name='性别')),
                ('phone', models.CharField(max_length=12, unique=True, verbose_name='电话')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='邮箱')),
                ('qq', models.CharField(max_length=16, unique=True, verbose_name='qq账号')),
                ('wechar', models.CharField(blank=True, max_length=32, null=True, unique=True, verbose_name='微信号')),
                ('work_status', models.SmallIntegerField(choices=[(0, '无业'), (1, '在职')], verbose_name='职业状态')),
                ('place', models.CharField(max_length=32, verbose_name='居住地点')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.ContractTemplateInfo', verbose_name='合同')),
            ],
            options={
                'verbose_name_plural': '加入时必填信息表',
                'db_table': 'CustomerDetailInfo',
            },
        ),
        migrations.CreateModel(
            name='CustomerFollowUpInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='跟踪内容')),
                ('status', models.SmallIntegerField(choices=[(0, '近期无报名计划'), (1, '一个月内报名'), (2, '2周内要报名'), (3, '已报名')], verbose_name='状态')),
                ('date', models.DateField(auto_now_add=True, verbose_name='日期')),
            ],
            options={
                'verbose_name_plural': '客户跟踪表',
                'db_table': 'CustomerFollowUpInfo',
            },
        ),
        migrations.CreateModel(
            name='CustomerInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='匿名用户', max_length=20)),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='发掘时间')),
                ('source', models.PositiveIntegerField(choices=[(0, 'qq群'), (1, '51CTO'), (2, '百度推广'), (3, '知乎'), (4, '转介绍'), (5, '其他论坛')], verbose_name='来源')),
                ('contact', models.PositiveIntegerField(choices=[(0, 'qq'), (1, '微信'), (2, '电话联系')], verbose_name='联系方式')),
                ('status', models.PositiveIntegerField(choices=[(0, '未报名'), (1, '已报名'), (2, '已退学')], verbose_name='状态')),
                ('consult_content', models.TextField(verbose_name='咨询内容')),
                ('consult_courses', models.ManyToManyField(to='repository.CourseInfo', verbose_name='咨询课程')),
                ('consultant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='课程顾问')),
                ('detail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.CustomerDetailInfo', verbose_name='报名时的详细信息')),
                ('introduce_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.CustomerInfo', verbose_name='转介绍学员')),
            ],
            options={
                'verbose_name_plural': '客户表',
                'db_table': 'CustomerInfo',
            },
        ),
        migrations.CreateModel(
            name='EnrollmentInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_agreed', models.BooleanField(default=False, verbose_name='达成协议？')),
                ('contract_agreed_date', models.DateTimeField(blank=True, null=True, verbose_name='合同签订日期时间')),
                ('contract_approved', models.BooleanField(default=False, verbose_name='审核通过？')),
                ('contract_approved_date', models.DateTimeField(blank=True, null=True, verbose_name='合同审核日期时间')),
                ('cls', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.ClsInfo', verbose_name='班级')),
                ('consultant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='招待员(销售)')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CustomerInfo', verbose_name='顾客')),
            ],
            options={
                'db_table': 'EnrollmentInfo',
            },
        ),
        migrations.CreateModel(
            name='LectureInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, verbose_name='本节主题')),
                ('content', models.TextField(verbose_name='本节主要内容')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='上课时间')),
                ('homework', models.TextField(blank=True, null=True, verbose_name='作业需求')),
                ('cls', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.ClsInfo', verbose_name='所属课堂')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='上课老师')),
            ],
            options={
                'verbose_name_plural': '课堂记录表',
                'db_table': 'LectureInfo',
            },
        ),
        migrations.CreateModel(
            name='MenuInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='菜单名')),
                ('url_type', models.SmallIntegerField(choices=[(0, '固定url'), (1, '动态url')], verbose_name='URL类型')),
                ('url_name', models.CharField(max_length=128, verbose_name='URL后缀')),
            ],
            options={
                'verbose_name_plural': '菜单表',
                'db_table': 'MenuInfo',
            },
        ),
        migrations.CreateModel(
            name='PaymentRecordInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.SmallIntegerField(choices=[(0, '报名费'), (1, '学费'), (2, '退费')], default=0, verbose_name='付费类型')),
                ('amount', models.IntegerField(verbose_name='数额')),
                ('pay_date', models.DateTimeField(auto_now_add=True, verbose_name='付费日期时间')),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.EnrollmentInfo', verbose_name='报名相关信息')),
            ],
            options={
                'db_table': 'PaymentRecordInfo',
            },
        ),
        migrations.CreateModel(
            name='QuestionInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='标题')),
                ('detail', models.TextField(verbose_name='问题详述')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='提问学生')),
            ],
            options={
                'verbose_name_plural': '提交问题表',
                'db_table': 'QuestionInfo',
            },
        ),
        migrations.CreateModel(
            name='RoleInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20, unique=True, verbose_name='角色名')),
                ('menu', models.ManyToManyField(blank=True, null=True, to='repository.MenuInfo', verbose_name='菜单')),
            ],
            options={
                'db_table': 'RoleInfo',
            },
        ),
        migrations.CreateModel(
            name='SchoolInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='学校名')),
                ('address', models.CharField(max_length=128, verbose_name='学校地址')),
            ],
            options={
                'verbose_name_plural': '校区表',
                'db_table': 'SchoolInfo',
            },
        ),
        migrations.CreateModel(
            name='ScoreInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.PositiveIntegerField(choices=[(100, 'A+'), (95, 'A'), (90, 'A-'), (85, 'B+'), (80, 'B'), (75, 'B-'), (70, 'C+'), (65, 'C'), (60, 'C-'), (0, '不及格')], default=0, verbose_name='成绩')),
                ('student_status', models.SmallIntegerField(choices=[(0, '缺勤'), (1, '迟到'), (2, '早退'), (3, '出勤')], verbose_name='出勤状态')),
                ('note', models.TextField(blank=True, null=True, verbose_name='成绩备注')),
                ('date', models.DateField(auto_now_add=True, verbose_name='提交日期')),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.LectureInfo', verbose_name='所属课堂')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='学员')),
            ],
            options={
                'verbose_name_plural': '成绩表',
                'db_table': 'ScoreInfo',
            },
        ),
        migrations.AddField(
            model_name='customerfollowupinfo',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CustomerInfo', verbose_name='客户'),
        ),
        migrations.AddField(
            model_name='customerfollowupinfo',
            name='handler',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='跟进入'),
        ),
        migrations.AddField(
            model_name='clsinfo',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CourseInfo', verbose_name='所学课程'),
        ),
        migrations.AddField(
            model_name='clsinfo',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.SchoolInfo', verbose_name='所属校区'),
        ),
        migrations.AddField(
            model_name='clsinfo',
            name='teachers',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='教师'),
        ),
        migrations.AddField(
            model_name='answerinfo',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.QuestionInfo', verbose_name='问题'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='role',
            field=models.ManyToManyField(blank=True, null=True, to='repository.RoleInfo'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollmentinfo',
            unique_together=set([('customer', 'consultant')]),
        ),
        migrations.AlterUniqueTogether(
            name='clsinfo',
            unique_together=set([('school', 'type', 'course', 'semester')]),
        ),
    ]
